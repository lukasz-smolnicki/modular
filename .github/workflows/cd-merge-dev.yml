name: CD PR â†’ dev (deploy + smoke)

on:
    pull_request:
        branches: [dev]
        types: [opened, synchronize, reopened]
    workflow_dispatch:
        inputs:
            force:
                description: 'Force full pipeline (ignore changed paths)'
                required: false
                default: 'false'
            components:
                description: 'Optional: comma-separated list (api,web,mobile)'
                required: false
                default: ''

concurrency:
    group: cd-merge-dev-${{ github.ref }}
    cancel-in-progress: true

permissions:
    contents: read

env:
    NODE_VERSION: '20'
    GCP_PROJECT: ${{ vars.GCP_PROJECT }}
    GCP_REGION: ${{ vars.GCP_REGION }}
    AR_HOST: ${{ vars.AR_HOST }}
    AR_REPO: ${{ vars.AR_REPO }}
    IMAGE_TAG: ${{ github.sha }}
    FIREBASE_PROJECT_ID: ${{ vars.FIREBASE_PROJECT_ID }}
    FIRESTORE_DATABASE_ID: ${{ vars.FIRESTORE_DATABASE_ID }}
    JWT_SECRET: ${{ vars.JWT_SECRET }}
    WEB_DEV_URL: ${{ vars.WEB_DEV_URL }}
    MOBILE_WEB_DEV_URL: ${{ vars.MOBILE_WEB_DEV_URL }}

jobs:
    changes:
        name: Changes (detect / force)
        runs-on: ubuntu-22.04
        outputs:
            web: ${{ steps.flags.outputs.web }}
            api: ${{ steps.flags.outputs.api }}
            mobile: ${{ steps.flags.outputs.mobile }}
            any_changed: ${{ steps.flags.outputs.any_changed }}
        steps:
            - uses: actions/checkout@v4
            - id: filter
              uses: tj-actions/changed-files@v45
              with:
                  separator: ','
                  files_yaml: |
                      web:
                        - 'apps/web/**'
                        - '.github/workflows/**'
                      api:
                        - 'apps/api/**'
                        - '.github/workflows/**'
                      mobile:
                        - 'apps/mobile/**'
                        - '.github/workflows/**'
                      any_changed:
                        - 'apps/**'
                        - 'packages/**'
                        - '.github/**'
                        - 'package.json'
                        - 'package-lock.json'
                        - 'turbo.json'
            - id: flags
              shell: bash
              env:
                  EVENT_NAME: ${{ github.event_name }}
                  FORCE: ${{ inputs.force }}
                  COMPONENTS: ${{ inputs.components }}
                  F_WEB: ${{ steps.filter.outputs.web }}
                  F_API: ${{ steps.filter.outputs.api }}
                  F_MOBILE: ${{ steps.filter.outputs.mobile }}
                  F_ANY: ${{ steps.filter.outputs.any_changed }}
              run: |
                  set -euo pipefail
                  norm_bool () {
                    local v="$(echo "${1:-}" | tr '[:upper:]' '[:lower:]' | xargs)"
                    [[ "$v" == "true" || "$v" == "1" || "$v" == "yes" || "$v" == "on" ]]
                  }
                  web="$F_WEB"; api="$F_API"; mobile="$F_MOBILE"; any="$F_ANY"
                  force_input="$(echo "${FORCE:-}" | tr '[:upper:]' '[:lower:]' | xargs)"
                  comps_input="$(echo "${COMPONENTS:-}" | tr '[:upper:]' '[:lower:]')"
                  if [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
                    if norm_bool "$force_input"; then
                      web=true; api=true; mobile=true; any=true
                    fi
                    if [[ -n "$comps_input" ]]; then
                      web=false; api=false; mobile=false
                      IFS=',' read -ra parts <<< "$comps_input"
                      for c in "${parts[@]}"; do
                        c="$(echo "$c" | xargs)"
                        [[ "$c" == "web" ]] && web=true
                        [[ "$c" == "api" ]] && api=true
                        [[ "$c" == "mobile" ]] && mobile=true
                      done
                      any=true
                    fi
                  fi
                  echo "web=$web" >> "$GITHUB_OUTPUT"
                  echo "api=$api" >> "$GITHUB_OUTPUT"
                  echo "mobile=$mobile" >> "$GITHUB_OUTPUT"
                  echo "any_changed=$any" >> "$GITHUB_OUTPUT"

    lint:
        name: Lint (ESLint)
        runs-on: ubuntu-22.04
        needs: changes
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
            - name: Install
              run: npm install --no-audit --no-fund
            - name: Lint
              run: npm run lint

    build:
        name: Build Artifacts (web + mobile + api)
        runs-on: ubuntu-22.04
        needs: lint
        if: |
            needs.changes.outputs.web == 'true' ||
            needs.changes.outputs.mobile == 'true' ||
            needs.changes.outputs.api == 'true' ||
            needs.changes.outputs.any_changed == 'true'
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
            - name: Install
              run: npm install --no-audit --no-fund
            - name: Build WEB
              if: needs.changes.outputs.web == 'true'
              run: npm run -w web build
            - name: Build MOBILE (Expo web)
              if: needs.changes.outputs.mobile == 'true'
              run: npm run -w mobile build:web
            - name: Build API (Nest compile)
              if: needs.changes.outputs.api == 'true'
              run: npm run -w api build
            - name: Upload built artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build-artifacts
                  path: |
                      apps/web/dist/**
                      apps/mobile/dist/**
                      apps/api/dist/**
                  if-no-files-found: ignore

    deploy-api:
        needs: [changes, build]
        if: needs.changes.outputs.api == 'true'
        name: Deploy API
        runs-on: ubuntu-22.04
        permissions:
            contents: read
        env:
            SERVICE_NAME: api-dev
            IMAGE_NAME: api
        outputs:
            url: ${{ steps.apiurl.outputs.url }}
        steps:
            - uses: actions/checkout@v4
            - name: Auth
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GCP_SA_KEY_JSON }}
            - name: Setup gcloud
              uses: google-github-actions/setup-gcloud@v2
              with:
                  project_id: ${{ env.GCP_PROJECT }}
            - name: Docker auth
              run: gcloud auth configure-docker ${{ env.AR_HOST }} --quiet
            - name: Build image
              working-directory: apps/api
              run: |
                  IMAGE_URI=${{ env.AR_HOST }}/${{ env.GCP_PROJECT }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                  echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
                  docker build -t "$IMAGE_URI" .
            - name: Push image
              run: docker push "$IMAGE_URI"
            - name: Deploy to Cloud Run
              run: |
                  gcloud run deploy ${{ env.SERVICE_NAME }} \
                    --project  ${{ env.GCP_PROJECT }} \
                    --region   ${{ env.GCP_REGION }} \
                    --image    "$IMAGE_URI" \
                    --platform managed \
                    --allow-unauthenticated \
                    --set-env-vars "API_PORT=8080,JWT_SECRET=${{ env.JWT_SECRET }},FIREBASE_PROJECT_ID=${{ env.FIREBASE_PROJECT_ID }},FIRESTORE_DATABASE_ID=${{ env.FIRESTORE_DATABASE_ID }},WEB_ORIGIN=${{ env.WEB_DEV_URL }},EXPO_WEB_ORIGIN=${{ env.MOBILE_WEB_DEV_URL }},WEB_ORIGIN_REGEX=^https://web-dev-[\\w-]+\\.a\\.run\\.app$,EXPO_WEB_ORIGIN_REGEX=^https://mobile-web-dev-[\\w-]+\\.a\\.run\\.app$" \
                    --quiet
            - name: Read service URL
              id: apiurl
              run: |
                  URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.GCP_REGION }} --format='value(status.url)')
                  echo "url=$URL" >> $GITHUB_OUTPUT
                  echo "SERVICE_URL=$URL" >> $GITHUB_ENV
            - name: Wait until healthy
              run: |
                  for i in {1..60}; do
                    if curl -fsS "$SERVICE_URL/health/api" >/dev/null; then
                      exit 0
                    fi
                    sleep 2
                  done
                  exit 1

    api-smoke:
        needs: [deploy-api]
        name: API smoke (reuse e2e)
        runs-on: ubuntu-22.04
        steps:
            - uses: actions/checkout@v4
            - name: Install deps for API tests
              working-directory: apps/api
              run: npm install --no-audit --no-fund
            - name: Run Jest against deployed API
              working-directory: apps/api
              env:
                  API_BASE_URL: ${{ needs.deploy-api.outputs.url }}
              run: |
                  npx jest -c test/jest-e2e.json --runInBand --testPathPatterns "test/health/.*\.e2e-spec\.ts"

    deploy-mobile:
        needs: [changes, build]
        if: needs.changes.outputs.mobile == 'true'
        name: Deploy Mobile Web
        runs-on: ubuntu-22.04
        permissions:
            contents: read
        env:
            SERVICE_NAME: mobile-web-dev
            IMAGE_NAME: mobile-web
        outputs:
            url: ${{ steps.moburl.outputs.url }}
        steps:
            - uses: actions/checkout@v4
            - name: Auth
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GCP_SA_KEY_JSON }}
            - name: Setup gcloud
              uses: google-github-actions/setup-gcloud@v2
              with:
                  project_id: ${{ env.GCP_PROJECT }}
            - name: Docker auth
              run: gcloud auth configure-docker ${{ env.AR_HOST }} --quiet
            - name: Build image
              run: |
                  IMAGE_URI=${{ env.AR_HOST }}/${{ env.GCP_PROJECT }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                  echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
                  docker build -f apps/mobile/Dockerfile --build-arg API_URL=${{ vars.API_DEV_URL }} -t "$IMAGE_URI" .
            - name: Push image
              run: docker push "$IMAGE_URI"
            - name: Deploy to Cloud Run
              run: |
                  gcloud run deploy ${{ env.SERVICE_NAME }} \
                    --project  ${{ env.GCP_PROJECT }} \
                    --region   ${{ env.GCP_REGION }} \
                    --image    "$IMAGE_URI" \
                    --platform managed \
                    --allow-unauthenticated \
                    --quiet
            - name: Read service URL
              id: moburl
              run: |
                  URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.GCP_REGION }} --format='value(status.url)')
                  echo "url=$URL" >> $GITHUB_OUTPUT
                  echo "SERVICE_URL=$URL" >> $GITHUB_ENV
            - name: Wait until ready
              run: |
                  for i in {1..60}; do
                    if curl -fsS "$SERVICE_URL/health" >/dev/null; then
                      exit 0
                    fi
                    sleep 2
                  done
                  exit 1

    deploy-web:
        needs: [changes, build]
        if: needs.changes.outputs.web == 'true'
        name: Deploy Web
        runs-on: ubuntu-22.04
        permissions:
            contents: read
        env:
            SERVICE_NAME: web-dev
            IMAGE_NAME: web
        outputs:
            url: ${{ steps.weburl.outputs.url }}
        steps:
            - uses: actions/checkout@v4
            - name: Auth
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GCP_SA_KEY_JSON }}
            - name: Setup gcloud
              uses: google-github-actions/setup-gcloud@v2
              with:
                  project_id: ${{ env.GCP_PROJECT }}
            - name: Docker auth
              run: gcloud auth configure-docker ${{ env.AR_HOST }} --quiet
            - name: Build image
              run: |
                  IMAGE_URI=${{ env.AR_HOST }}/${{ env.GCP_PROJECT }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                  echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
                  docker build -f apps/web/Dockerfile --build-arg API_URL=${{ vars.API_DEV_URL }} -t "$IMAGE_URI" .
            - name: Push image
              run: docker push "$IMAGE_URI"
            - name: Deploy to Cloud Run
              run: |
                  gcloud run deploy ${{ env.SERVICE_NAME }} \
                    --project  ${{ env.GCP_PROJECT }} \
                    --region   ${{ env.GCP_REGION }} \
                    --image    "$IMAGE_URI" \
                    --platform managed \
                    --allow-unauthenticated \
                    --quiet
            - name: Read service URL
              id: weburl
              run: |
                  URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.GCP_REGION }} --format='value(status.url)')
                  echo "url=$URL" >> $GITHUB_OUTPUT
                  echo "SERVICE_URL=$URL" >> $GITHUB_ENV
            - name: Wait until ready
              run: |
                  for i in {1..60}; do
                    if curl -fsS "$SERVICE_URL/health" >/dev/null; then
                      exit 0
                    fi
                    sleep 2
                  done
                  exit 1

    web-e2e:
        needs: [deploy-api, deploy-web]
        name: Web smoke (Playwright â†’ deployed web)
        runs-on: ubuntu-22.04
        container: mcr.microsoft.com/playwright:v1.56.0-jammy
        steps:
            - uses: actions/checkout@v4
            - run: echo "WEB_BASE_URL=${{ needs.deploy-web.outputs.url }}" >> $GITHUB_ENV
            - name: Wait until /health is ready
              run: |
                  for i in {1..60}; do
                    if curl -fsS "$WEB_BASE_URL/health" >/dev/null; then
                      exit 0
                    fi
                    sleep 2
                  done
                  exit 1
            - name: Prepare Playwright runner (no-save)
              working-directory: apps/web
              run: npm i -D --no-save @playwright/test@1.56.0
            - env:
                  WEB_BASE_URL: ${{ env.WEB_BASE_URL }}
              run: |
                  npx -y @playwright/test@1.56.0 test \
                    -c apps/web/playwright.cloud.config.ts \
                    --reporter=line

    mobile-e2e:
        needs: [deploy-api, deploy-mobile]
        name: Mobile smoke (Playwright â†’ deployed mobile web)
        runs-on: ubuntu-22.04
        container: mcr.microsoft.com/playwright:v1.56.0-jammy
        steps:
            - uses: actions/checkout@v4
            - run: echo "WEB_BASE_URL=${{ needs.deploy-mobile.outputs.url }}" >> $GITHUB_ENV
            - name: Wait until /health is ready
              run: |
                  for i in {1..60}; do
                    if curl -fsS "$WEB_BASE_URL/health" >/dev/null; then
                      exit 0
                    fi
                    sleep 2
                  done
                  exit 1
            - name: Prepare Playwright runner (no-save)
              working-directory: apps/mobile
              run: npm i -D --no-save @playwright/test@1.56.0
            - env:
                  WEB_BASE_URL: ${{ env.WEB_BASE_URL }}
              run: |
                  npx -y @playwright/test@1.56.0 test \
                    -c apps/mobile/playwright.cloud.config.ts \
                    --reporter=line

    rollback_on_failure:
        name: Rollback (on smoke failure)
        runs-on: ubuntu-22.04
        needs: [api-smoke, mobile-e2e, web-e2e]
        if: |
            needs.api-smoke.result == 'failure' ||
            needs.mobile-e2e.result == 'failure' ||
            needs.web-e2e.result == 'failure'
        steps:
            - uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GCP_SA_KEY_JSON }}
            - uses: google-github-actions/setup-gcloud@v2
              with:
                  project_id: ${{ env.GCP_PROJECT }}
            - name: Rollback API
              if: needs.changes.outputs.api == 'true'
              run: |
                  SERVICE="api-dev"
                  REGION="${{ env.GCP_REGION }}"
                  PREV_REV=$(gcloud run services describe $SERVICE --region $REGION --format='value(status.traffic[1].revisionName)')
                  if [ -n "$PREV_REV" ]; then
                    gcloud run services update-traffic $SERVICE --region $REGION --to-revisions $PREV_REV=100
                  fi
            - name: Rollback Web
              if: needs.changes.outputs.web == 'true'
              run: |
                  SERVICE="web-dev"
                  REGION="${{ env.GCP_REGION }}"
                  PREV_REV=$(gcloud run services describe $SERVICE --region $REGION --format='value(status.traffic[1].revisionName)')
                  if [ -n "$PREV_REV" ]; then
                    gcloud run services update-traffic $SERVICE --region $REGION --to-revisions $PREV_REV=100
                  fi
            - name: Rollback Mobile
              if: needs.changes.outputs.mobile == 'true'
              run: |
                  SERVICE="mobile-web-dev"
                  REGION="${{ env.GCP_REGION }}"
                  PREV_REV=$(gcloud run services describe $SERVICE --region $REGION --format='value(status.traffic[1].revisionName)')
                  if [ -n "$PREV_REV" ]; then
                    gcloud run services update-traffic $SERVICE --region $REGION --to-revisions $PREV_REV=100
                  fi
            - run: exit 1
