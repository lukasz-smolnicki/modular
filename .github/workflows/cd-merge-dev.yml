name: CD – merge → dev (deploy)

on:
    push:
        branches: [dev]
    workflow_dispatch:

concurrency:
    group: deploy-services-dev-${{ github.ref }}
    cancel-in-progress: true

env:
    GCP_PROJECT: ${{ vars.GCP_PROJECT }}
    GCP_REGION: ${{ vars.GCP_REGION }}
    AR_HOST: ${{ vars.AR_HOST }}
    AR_REPO: ${{ vars.AR_REPO }}
    IMAGE_TAG: ${{ github.sha }}

jobs:
    changes:
        runs-on: ubuntu-22.04
        outputs:
            api: ${{ steps.filter.outputs.api }}
            mobile: ${{ steps.filter.outputs.mobile }}
            web: ${{ steps.filter.outputs.web }}
        steps:
            - uses: actions/checkout@v4
            - id: filter
              uses: dorny/paths-filter@v3
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  filters: |
                      api:
                        - 'apps/api/**'
                        - '.github/workflows/cd-merge-dev.yml'
                      mobile:
                        - 'apps/mobile/**'
                        - '.github/workflows/cd-merge-dev.yml'
                      web:
                        - 'apps/web/**'
                        - '.github/workflows/cd-merge-dev.yml'

    deploy-api:
        needs: [changes]
        if: needs.changes.outputs.api == 'true'
        name: Deploy API
        runs-on: ubuntu-22.04
        permissions:
            contents: read
        env:
            SERVICE_NAME: api-dev
            IMAGE_NAME: api
        outputs:
            url: ${{ steps.apiurl.outputs.url }}
        steps:
            - uses: actions/checkout@v4
            - name: Auth
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GCP_SA_KEY_JSON }}
            - name: Setup gcloud
              uses: google-github-actions/setup-gcloud@v2
              with:
                  project_id: ${{ env.GCP_PROJECT }}
            - name: Docker auth
              run: gcloud auth configure-docker ${{ env.AR_HOST }} --quiet
            - name: Build image
              working-directory: apps/api
              run: |
                  IMAGE_URI=${{ env.AR_HOST }}/${{ env.GCP_PROJECT }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                  echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
                  docker build -t "$IMAGE_URI" .
            - name: Push image
              run: docker push "$IMAGE_URI"
            - name: Deploy to Cloud Run
              run: |
                  gcloud run deploy ${{ env.SERVICE_NAME }} \
                    --project  ${{ env.GCP_PROJECT }} \
                    --region   ${{ env.GCP_REGION }} \
                    --image    "$IMAGE_URI" \
                    --platform managed \
                    --allow-unauthenticated \
                    --set-env-vars "API_PORT=8080,JWT_SECRET=${{ vars.JWT_SECRET }},FIREBASE_PROJECT_ID=${{ vars.FIREBASE_PROJECT_ID }},FIRESTORE_DATABASE_ID=${{ vars.FIRESTORE_DATABASE_ID }},WEB_ORIGIN=${{ vars.WEB_DEV_URL }},EXPO_WEB_ORIGIN=${{ vars.MOBILE_WEB_DEV_URL }},WEB_ORIGIN_REGEX=^https://web-dev-[a-z0-9-]+\\.a\\.run\\.app$,EXPO_WEB_ORIGIN_REGEX=^https://mobile-web-dev-[a-z0-9-]+\\.a\\.run\\.app$" \
                    --quiet
            - name: Read service URL
              id: apiurl
              run: |
                  URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.GCP_REGION }} --format='value(status.url)')
                  echo "url=$URL" >> $GITHUB_OUTPUT
                  echo "SERVICE_URL=$URL" >> $GITHUB_ENV
            - name: Wait until healthy
              run: |
                  for i in {1..60}; do
                    if curl -fsS "$SERVICE_URL/health/api" >/dev/null; then
                      exit 0
                    fi
                    sleep 2
                  done
                  exit 1

    api-smoke:
        needs: [deploy-api]
        name: API smoke (reuse e2e)
        runs-on: ubuntu-22.04
        steps:
            - uses: actions/checkout@v4
            - name: Install deps for API tests
              working-directory: apps/api
              run: npm install --no-audit --no-fund
            - name: Run Jest against deployed API
              working-directory: apps/api
              env:
                  API_BASE_URL: ${{ needs.deploy-api.outputs.url }}
              run: |
                  npx jest -c test/jest-e2e.json --runInBand --testPathPatterns "test/health/.*\.e2e-spec\.ts"

    deploy-mobile:
        needs: [changes]
        if: needs.changes.outputs.mobile == 'true'
        name: Deploy Mobile Web
        runs-on: ubuntu-22.04
        permissions:
            contents: read
        env:
            SERVICE_NAME: mobile-web-dev
            IMAGE_NAME: mobile-web
        steps:
            - uses: actions/checkout@v4
            - name: Auth
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GCP_SA_KEY_JSON }}
            - name: Setup gcloud
              uses: google-github-actions/setup-gcloud@v2
              with:
                  project_id: ${{ env.GCP_PROJECT }}
            - name: Docker auth
              run: gcloud auth configure-docker ${{ env.AR_HOST }} --quiet
            - name: Build image
              run: |
                  IMAGE_URI=${{ env.AR_HOST }}/${{ env.GCP_PROJECT }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                  echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
                  docker build -f apps/mobile/Dockerfile --build-arg API_URL=${{ vars.API_DEV_URL }} -t "$IMAGE_URI" .
            - name: Push image
              run: docker push "$IMAGE_URI"
            - name: Deploy to Cloud Run
              run: |
                  gcloud run deploy ${{ env.SERVICE_NAME }} \
                    --project  ${{ env.GCP_PROJECT }} \
                    --region   ${{ env.GCP_REGION }} \
                    --image    "$IMAGE_URI" \
                    --platform managed \
                    --allow-unauthenticated \
                    --quiet

    deploy-web:
        needs: [changes]
        if: needs.changes.outputs.web == 'true'
        name: Deploy Web
        runs-on: ubuntu-22.04
        permissions:
            contents: read
        env:
            SERVICE_NAME: web-dev
            IMAGE_NAME: web
        outputs:
            url: ${{ steps.weburl.outputs.url }}
        steps:
            - uses: actions/checkout@v4
            - name: Auth
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GCP_SA_KEY_JSON }}
            - name: Setup gcloud
              uses: google-github-actions/setup-gcloud@v2
              with:
                  project_id: ${{ env.GCP_PROJECT }}
            - name: Docker auth
              run: gcloud auth configure-docker ${{ env.AR_HOST }} --quiet
            - name: Build image
              run: |
                  IMAGE_URI=${{ env.AR_HOST }}/${{ env.GCP_PROJECT }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                  echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
                  docker build -f apps/web/Dockerfile --build-arg API_URL=${{ vars.API_DEV_URL }} -t "$IMAGE_URI" .
            - name: Push image
              run: docker push "$IMAGE_URI"
            - name: Deploy to Cloud Run
              run: |
                  gcloud run deploy ${{ env.SERVICE_NAME }} \
                    --project  ${{ env.GCP_PROJECT }} \
                    --region   ${{ env.GCP_REGION }} \
                    --image    "$IMAGE_URI" \
                    --platform managed \
                    --allow-unauthenticated \
                    --quiet
            - name: Read service URL
              id: weburl
              run: |
                  URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.GCP_REGION }} --format='value(status.url)')
                  echo "url=$URL" >> $GITHUB_OUTPUT
                  echo "SERVICE_URL=$URL" >> $GITHUB_ENV
            - name: Wait until ready
              run: |
                  for i in {1..60}; do
                    if curl -fsS "$SERVICE_URL/health" >/dev/null; then
                      exit 0
                    fi
                    sleep 2
                  done
                  exit 1

    web-e2e:
        needs: [deploy-api, deploy-web]
        name: Web smoke (Playwright → deployed web)
        runs-on: ubuntu-22.04
        container: mcr.microsoft.com/playwright:v1.56.0-jammy
        steps:
            - uses: actions/checkout@v4
            - run: echo "WEB_BASE_URL=${{ needs.deploy-web.outputs.url }}" >> $GITHUB_ENV
            - name: Wait until /health is ready
              run: |
                  for i in {1..60}; do
                    if curl -fsS "$WEB_BASE_URL/health" >/dev/null; then
                      exit 0
                    fi
                    sleep 2
                  done
                  exit 1
            - name: Prepare Playwright runner (no-save)
              working-directory: apps/web
              run: npm i -D --no-save @playwright/test@1.56.0
            - env:
                  WEB_BASE_URL: ${{ env.WEB_BASE_URL }}
              run: |
                  npx -y @playwright/test@1.56.0 test \
                    -c apps/web/playwright.cloud.config.ts \
                    --reporter=line
