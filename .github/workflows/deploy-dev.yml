name: deploy-dev

on:
    push:
        branches: [dev]
    workflow_dispatch:

permissions:
    contents: read

concurrency:
    group: deploy-dev-${{ github.ref }}
    cancel-in-progress: true

env:
    CI: true
    FORCE_COLOR: '1'

jobs:
    build-and-push:
        name: Build & Push (${{ matrix.app }})
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                app: [api, web, mobile-web]
        steps:
            - uses: actions/checkout@v4
            - uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ vars.GCP_SA_KEY_JSON }}
            - uses: google-github-actions/setup-gcloud@v2
              with:
                  project_id: ${{ vars.GCP_PROJECT }}
            - run: gcloud auth configure-docker "${{ vars.AR_HOST }}" --quiet

            - name: Compute image tags
              id: img
              shell: bash
              run: |
                  AR_HOST="${{ vars.AR_HOST }}"
                  AR_REPO="${{ vars.AR_REPO }}"
                  GCP_PROJECT="${{ vars.GCP_PROJECT }}"
                  SHORT_SHA="${GITHUB_SHA::7}"
                  IMAGE="${AR_HOST}/${GCP_PROJECT}/${AR_REPO}/${{ matrix.app }}:dev-${SHORT_SHA}"
                  LATEST="${AR_HOST}/${GCP_PROJECT}/${AR_REPO}/${{ matrix.app }}:dev-latest"
                  echo "image=$IMAGE"  >> "$GITHUB_OUTPUT"
                  echo "latest=$LATEST" >> "$GITHUB_OUTPUT"

            - name: Build API
              if: matrix.app == 'api'
              run: docker build -t "${{ steps.img.outputs.image }}" -f apps/api/Dockerfile .

            - name: Build Web
              if: matrix.app == 'web'
              run: |
                  docker build \
                    --build-arg VITE_API_BASE_URL="${{ vars.API_DEV_URL || 'http://placeholder' }}" \
                    -t "${{ steps.img.outputs.image }}" \
                    -f apps/web/Dockerfile .

            - name: Build Mobile Web
              if: matrix.app == 'mobile-web'
              run: |
                  docker build \
                    --build-arg EXPO_PUBLIC_API_BASE_URL="${{ vars.API_DEV_URL || 'http://placeholder' }}" \
                    -t "${{ steps.img.outputs.image }}" \
                    -f apps/mobile/Dockerfile .

            - name: Push image
              run: |
                  docker push "${{ steps.img.outputs.image }}"
                  docker tag  "${{ steps.img.outputs.image }}" "${{ steps.img.outputs.latest }}"
                  docker push "${{ steps.img.outputs.latest }}"

    deploy:
        name: Deploy (${{ matrix.app }})
        needs: build-and-push
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                app: [api, web, mobile-web]
        outputs:
            api_url: ${{ steps.discover.outputs.api_url }}
            web_url: ${{ steps.discover.outputs.web_url }}
            mob_url: ${{ steps.discover.outputs.mob_url }}
        steps:
            - uses: actions/checkout@v4
            - uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ vars.GCP_SA_KEY_JSON }}
            - uses: google-github-actions/setup-gcloud@v2
              with:
                  project_id: ${{ vars.GCP_PROJECT }}

            - name: Compute image tag
              id: img
              shell: bash
              run: |
                  AR_HOST="${{ vars.AR_HOST }}"
                  AR_REPO="${{ vars.AR_REPO }}"
                  GCP_PROJECT="${{ vars.GCP_PROJECT }}"
                  SHORT_SHA="${GITHUB_SHA::7}"
                  echo "image=${AR_HOST}/${GCP_PROJECT}/${AR_REPO}/${{ matrix.app }}:dev-${SHORT_SHA}" >> "$GITHUB_OUTPUT"

            - name: Deploy API
              if: matrix.app == 'api'
              run: |
                  gcloud run deploy api-dev \
                    --image "${{ steps.img.outputs.image }}" \
                    --region "${{ vars.GCP_REGION }}" \
                    --platform managed \
                    --allow-unauthenticated \
                    --port 8080 \
                    --set-env-vars "WEB_ORIGIN=${{ vars.WEB_DEV_URL || '*' }},EXPO_WEB_ORIGIN=${{ vars.MOBILE_WEB_DEV_URL || '*' }},JWT_SECRET=${{ vars.JWT_SECRET }},FIREBASE_PROJECT_ID=${{ vars.FIREBASE_PROJECT_ID }}"

            - name: Deploy Web
              if: matrix.app == 'web'
              run: |
                  gcloud run deploy web-dev \
                    --image "${{ steps.img.outputs.image }}" \
                    --region "${{ vars.GCP_REGION }}" \
                    --platform managed \
                    --allow-unauthenticated \
                    --port 8080

            - name: Deploy Mobile Web
              if: matrix.app == 'mobile-web'
              run: |
                  gcloud run deploy mobile-web-dev \
                    --image "${{ steps.img.outputs.image }}" \
                    --region "${{ vars.GCP_REGION }}" \
                    --platform managed \
                    --allow-unauthenticated \
                    --port 8080

            - name: Discover URLs
              id: discover
              shell: bash
              run: |
                  REGION="${{ vars.GCP_REGION }}"
                  API_URL="$(gcloud run services describe api-dev --region "$REGION" --format='value(status.url)')"
                  WEB_URL="$(gcloud run services describe web-dev --region "$REGION" --format='value(status.url)')"
                  MOB_URL="$(gcloud run services describe mobile-web-dev --region "$REGION" --format='value(status.url)')"
                  echo "api_url=$API_URL" >> "$GITHUB_OUTPUT"
                  echo "web_url=$WEB_URL" >> "$GITHUB_OUTPUT"
                  echo "mob_url=$MOB_URL" >> "$GITHUB_OUTPUT"

            - name: Patch API CORS with discovered origins
              if: matrix.app == 'api'
              env:
                  WEB_URL: ${{ steps.discover.outputs.web_url }}
                  MOB_URL: ${{ steps.discover.outputs.mob_url }}
              run: |
                  gcloud run services update api-dev \
                    --region "${{ vars.GCP_REGION }}" \
                    --set-env-vars "WEB_ORIGIN=${WEB_URL},EXPO_WEB_ORIGIN=${MOB_URL}"

    warmup:
        name: Warm-up
        needs: deploy
        runs-on: ubuntu-latest
        steps:
            - name: Wait for 200
              env:
                  WEB_URL: ${{ needs.deploy.outputs.web_url }}
                  MOB_URL: ${{ needs.deploy.outputs.mob_url }}
              run: |
                  npx --yes wait-on --timeout 180000 --httpTimeout 30000 "$WEB_URL"
                  npx --yes wait-on --timeout 180000 --httpTimeout 30000 "$MOB_URL"
                  curl -fsS "$WEB_URL" >/dev/null || true
                  curl -fsS "$MOB_URL" >/dev/null || true

    smoke:
        name: Smoke tests
        needs: [deploy, warmup]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: npm
            - run: npm ci

            - name: API smoke
              env:
                  API_URL: ${{ needs.deploy.outputs.api_url }}
              run: |
                  curl -sSf "${API_URL}/health/api" | grep -q 'Witamy z API'
                  curl -sSf "${API_URL}/health/firestore" | grep -q 'Witamy z FIRESTORE'

            - name: Web smoke
              env:
                  WEB_URL: ${{ needs.deploy.outputs.web_url }}
              run: |
                  curl -sSf "$WEB_URL/health" | grep -q 'Witamy z API'
                  curl -sSf "$WEB_URL/health" | grep -q 'Witamy z FIRESTORE'

            - name: Mobile Web smoke
              env:
                  MOB_URL: ${{ needs.deploy.outputs.mob_url }}
              run: |
                  curl -sSf "$MOB_URL/health" | grep -q 'Witamy z API'
                  curl -sSf "$MOB_URL/health" | grep -q 'Witamy z FIRESTORE'
